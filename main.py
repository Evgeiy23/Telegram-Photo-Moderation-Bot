import asyncio
import logging
import random
import datetime
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

import api_mai
# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = api.TOKEN  # –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
ADMINS = api.ADMINS  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CHANNEL_ID = api.CHANNEL_ID # ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞
REQUIRED_APPROVALS = 2  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–∏–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
PHOTOS_FOLDER = "photos"
if not os.path.exists(PHOTOS_FOLDER):
    os.makedirs(PHOTOS_FOLDER)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
next_photo_number = 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
# pending_photos: { unique_key: { "photo_id": <file_id>,
#                                 "sender_id": <user_id>,
#                                 "origin_chat_id": <chat_id>,
#                                 "origin_message_id": <message_id>,
#                                 "admins": set(),
#                                 "messages": [(admin_id, message_id), ...] } }
pending_photos = {}
# pending_votes: { unique_key: set(admin_id, ...) }
pending_votes = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ.
scheduled_count = 0

# –î–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "üí¨ –û–±—Å—É–¥–∏—Ç—å")
active_chats = {}


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–±—Å—É–∂–¥–µ–Ω–∏–µ) ===
@dp.message(Command(commands=["chat"]))
async def admin_chat(message: types.Message, command: CommandObject):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return

    admin_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id not in active_chats:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí¨ –û–±—Å—É–¥–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
        return

    unique_key = active_chats[admin_id]

    if unique_key not in pending_photos:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        active_chats.pop(admin_id, None)
        return

    if not command.args:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /chat")
        return

    chat_text = command.args
    sender = message.from_user.username or str(admin_id)
    formatted_text = f"<b>{sender}:</b> {chat_text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∫–æ–º—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
    # (–ø–æ –¥–∞–Ω–Ω—ã–º pending_photos[unique_key]["messages"])
    for admin, _ in pending_photos[unique_key]["messages"]:
        if admin == admin_id:
            continue
        try:
            await bot.send_message(chat_id=admin, text=formatted_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ===
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    global next_photo_number
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    unique_key = str(next_photo_number)
    next_photo_number += 1

    photo_id = message.photo[-1].file_id
    pending_photos[unique_key] = {
        "photo_id": photo_id,
        "sender_id": message.from_user.id,
        "origin_chat_id": message.chat.id,
        "origin_message_id": message.message_id,
        "admins": set(),
        "messages": []  # —Å—é–¥–∞ –∑–∞–ø–∏—à–µ–º –∫–æ—Ä—Ç–µ–∂–∏ (admin_id, message_id)
    }
    pending_votes[unique_key] = set()

    caption = (
        f"–§–æ—Ç–æ #{unique_key} –æ—Ç @{message.from_user.username or message.from_user.id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
        "–î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí¨ –û–±—Å—É–¥–∏—Ç—å'."
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{unique_key}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{unique_key}")
            ],
            [
                InlineKeyboardButton(text="üí¨ –û–±—Å—É–¥–∏—Ç—å", callback_data=f"chat_{unique_key}")
            ]
        ]
    )

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMINS:
        try:
            sent_message = await bot.send_photo(
                chat_id=admin_id,
                photo=photo_id,
                caption=caption,
                reply_markup=keyboard
            )
            pending_photos[unique_key]["messages"].append((admin_id, sent_message.message_id))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await message.answer("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_other_messages(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –æ–±—Å—É–∂–¥–µ–Ω–∏–µ) ===
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    if len(data_parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    action, unique_key = data_parts[0], data_parts[1]

    if unique_key not in pending_photos:
        await callback.answer("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    if callback.from_user.id not in ADMINS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    admin_id = callback.from_user.id

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "üí¨ –û–±—Å—É–¥–∏—Ç—å"
    if action == "chat":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        active_chats[admin_id] = unique_key
        instruction = (
            f"–í—ã –Ω–∞—á–∞–ª–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ #{unique_key}.\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π: /chat –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        await callback.message.answer(instruction)
        await callback.answer()
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ —Ñ–æ—Ç–æ, –Ω–µ –¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
    if admin_id in pending_votes[unique_key]:
        await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ —Ñ–æ—Ç–æ.")
        return

    pending_votes[unique_key].add(admin_id)

    if action == "approve":
        pending_photos[unique_key]["admins"].add(admin_id)
        if len(pending_photos[unique_key]["admins"]) >= REQUIRED_APPROVALS:
            try:
                file_info = await bot.get_file(pending_photos[unique_key]["photo_id"])
                local_path = os.path.join(PHOTOS_FOLDER, f"{unique_key}.jpg")
                await bot.download_file(file_info.file_path, destination=local_path)
                await callback.answer("–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                sender_id = pending_photos[unique_key].get("sender_id")
                origin_chat = pending_photos[unique_key].get("origin_chat_id")
                origin_message = pending_photos[unique_key].get("origin_message_id")
                if sender_id and origin_chat and origin_message:
                    try:
                        await bot.send_message(
                            origin_chat,
                            "–í–∞—à–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ!",
                            reply_to_message_id=origin_message
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_id}: {e}")

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for admin, message_id in pending_photos[unique_key]["messages"]:
                    try:
                        await bot.delete_message(chat_id=admin, message_id=message_id)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {admin}: {e}")

                pending_photos.pop(unique_key)
                pending_votes.pop(unique_key)

                # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                for admin in list(active_chats.keys()):
                    if active_chats.get(admin) == unique_key:
                        active_chats.pop(admin, None)

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ñ–æ—Ç–æ (—Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ—Ç–µ)
                schedule_photo(unique_key)
            except Exception as e:
                await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", show_alert=True)
        else:
            await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω. –ù—É–∂–Ω–æ –µ—â–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")
    elif action == "reject":
        # –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        for admin, message_id in pending_photos[unique_key]["messages"]:
            try:
                await bot.delete_message(chat_id=admin, message_id=message_id)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {admin}: {e}")
        pending_photos.pop(unique_key)
        pending_votes.pop(unique_key)
        # –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        for admin in list(active_chats.keys()):
            if active_chats.get(admin) == unique_key:
                active_chats.pop(admin, None)
        await callback.answer("–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")


# === –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ (—Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º) ===
def schedule_photo(unique_key: str):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ scheduled_count:
    slot_index = 0 ‚Üí —É—Ç—Ä–æ (4-12)
    slot_index = 1 ‚Üí –¥–µ–Ω—å (13-17)
    slot_index = 2 ‚Üí –≤–µ—á–µ—Ä (18-23)
    –ï—Å–ª–∏ –∑–∞ —Å—É—Ç–∫–∏ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ 3 —Ñ–æ—Ç–æ, —Å–ª–µ–¥—É—é—â–µ–µ —É–π–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
    """
    global scheduled_count
    day_offset = scheduled_count // 3
    slot_index = scheduled_count % 3
    scheduled_count += 1

    now = datetime.datetime.now()
    target_date = now.date() + datetime.timedelta(days=day_offset)

    if slot_index == 0:
        slot_start_time = datetime.time(4, 0, 0)
        slot_end_time = datetime.time(12, 0, 0)
    elif slot_index == 1:
        slot_start_time = datetime.time(13, 0, 0)
        slot_end_time = datetime.time(17, 0, 0)
    else:
        slot_start_time = datetime.time(18, 0, 0)
        slot_end_time = datetime.time(23, 0, 0)

    slot_start = datetime.datetime.combine(target_date, slot_start_time)
    slot_end = datetime.datetime.combine(target_date, slot_end_time)
    delta_seconds = int((slot_end - slot_start).total_seconds())
    random_offset = random.randint(0, delta_seconds)
    scheduled_time = slot_start + datetime.timedelta(seconds=random_offset)

    delay = (scheduled_time - now).total_seconds()
    if delay < 0:
        delay = 0

    logger.info(f"–§–æ—Ç–æ —Å –∫–ª—é—á–æ–º {unique_key} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {scheduled_time} (—á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥).")
    asyncio.create_task(delayed_send(delay, unique_key))


# === –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ ===
async def delayed_send(delay: float, unique_key: str):
    await asyncio.sleep(delay)
    await send_scheduled_photo(unique_key)


# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª ===
async def send_scheduled_photo(unique_key: str):
    file_path = os.path.join(PHOTOS_FOLDER, f"{unique_key}.jpg")
    if not os.path.exists(file_path):
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FSInputFile –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    photo_input = FSInputFile(file_path)
    await bot.send_photo(
        chat_id=CHANNEL_ID,
        photo=photo_input,
    )
    logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ {unique_key} –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}.")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    try:
        os.remove(file_path)
        logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
